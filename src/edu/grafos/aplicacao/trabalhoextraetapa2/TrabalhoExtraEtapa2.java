package edu.grafos.aplicacao.trabalhoextraetapa2;

import java.awt.Font;
import java.awt.Insets;

import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;

import edu.grafos.GrafoPonderado;
import edu.grafos.metodosdebusca.ponderado.ResultadoDijkstra;

public class TrabalhoExtraEtapa2 {
	private JPanel root;
	private JLabel lbl1;
	private JTable tblDistancias;
	private JLabel lbl2;
	private JTable tblPredecessores;
	private JLabel lblRes;
	private JLabel lbl13;
	public ResultadoDijkstra resultado;
	
	public static void main( String[] args ) {
		TrabalhoExtraEtapa2 app = new TrabalhoExtraEtapa2();
		JFrame frame = new JFrame( "Trabalho1Etapa1" );
		frame.setContentPane( app.root );
		frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
		frame.pack();
		frame.setVisible( true );
		frame.setLocationRelativeTo( null );
		frame.setSize( 400, 250 );
		app.lblRes.setText( app.resultado.menorCaminho( 11 ).toString() );
	}
	
	private void createUIComponents() {
		int grafo[][] = new int[][] {
				//       a   b   c   d   e   f   g   h   i   j   l   m
				/*a*/ { -1, 61, 50, 42, -1, -1, -1, -1, -1, -1, -1, -1 },
				/*b*/ { 61, -1, -1, 32, -1, 29, -1, -1, -1, 17, -1, -1 },
				/*c*/ { 50, -1, -1, 56, 67, -1, -1, -1, -1, -1, -1, -1 },
				/*d*/ { 42, 32, 56, -1, 45, 62, 85, -1, -1, -1, -1, -1 },
				/*e*/ { -1, -1, 67, 45, -1, -1, 72, -1, 73, -1, -1, -1 },
				/*f*/ { -1, 29, -1, 62, -1, -1, 20, 35, -1, 30, 45, -1 },
				/*g*/ { -1, -1, -1, 85, 72, 20, -1, 40, 60, -1, -1, 32 },
				/*h*/ { -1, -1, -1, -1, -1, 35, 40, -1, -1, -1, 50, 21 },
				/*i*/ { -1, -1, -1, -1, 73, -1, 60, -1, -1, -1, -1, 50 },
				/*j*/ { -1, 17, -1, -1, -1, 30, -1, -1, -1, -1, 30, -1 },
				/*l*/ { -1, -1, -1, -1, -1, 45, -1, 50, -1, 30, -1, -1 },
				/*m*/ { -1, -1, -1, -1, -1, 32, -1, 21, 50, -1, -1, -1 }
		};
		
		//Destino ignorado utilizando o algoritmo de Dijkstra
		resultado =
				(ResultadoDijkstra) new GrafoPonderado( grafo, true )
						.buscar( 0, 0, GrafoPonderado.MetodoDeBusca.DIJKSTRA );
		
		Object[] colunas = { "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "l", "m" };
		Object[] distancias = new Object[grafo.length];
		Object[] predecessores = new Object[grafo.length];
		for ( int i = 0; i < resultado.getDistancias().length; i++ ) {
			distancias[i] = resultado.getDistancias()[i];
			predecessores[i] = resultado.getPredecessores()[i];
		}
		
		tblDistancias = new JTable( new Object[][] { distancias }, colunas );
		tblPredecessores = new JTable( new Object[][] { predecessores }, colunas );
	}
	
	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}
	
	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		createUIComponents();
		root = new JPanel();
		root.setLayout( new com.intellij.uiDesigner.core.GridLayoutManager( 6, 1, new Insets( 0, 0, 0, 0 ), -1, -1 ) );
		lbl1 = new JLabel();
		Font lbl1Font = this.$$$getFont$$$( "Consolas", Font.BOLD, 18, lbl1.getFont() );
		if ( lbl1Font != null ) {
			lbl1.setFont( lbl1Font );
		}
		lbl1.setText( "Tabela de distâncias" );
		root.add( lbl1, new com.intellij.uiDesigner.core.GridConstraints( 0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false ) );
		lbl2 = new JLabel();
		Font lbl2Font = this.$$$getFont$$$( "Consolas", Font.BOLD, 18, lbl2.getFont() );
		if ( lbl2Font != null ) {
			lbl2.setFont( lbl2Font );
		}
		lbl2.setText( "Tabela de predecessores" );
		root.add( lbl2, new com.intellij.uiDesigner.core.GridConstraints( 2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false ) );
		final JScrollPane scrollPane1 = new JScrollPane();
		scrollPane1.setHorizontalScrollBarPolicy( 31 );
		scrollPane1.setVerticalScrollBarPolicy( 21 );
		root.add( scrollPane1, new com.intellij.uiDesigner.core.GridConstraints( 1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTH, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false ) );
		tblDistancias.setAutoResizeMode( 4 );
		tblDistancias.setFillsViewportHeight( false );
		scrollPane1.setViewportView( tblDistancias );
		final JScrollPane scrollPane2 = new JScrollPane();
		scrollPane2.setHorizontalScrollBarPolicy( 31 );
		scrollPane2.setVerticalScrollBarPolicy( 21 );
		root.add( scrollPane2, new com.intellij.uiDesigner.core.GridConstraints( 3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTH, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false ) );
		scrollPane2.setViewportView( tblPredecessores );
		lbl13 = new JLabel();
		Font lbl13Font = this.$$$getFont$$$( "Consolas", Font.BOLD, 18, lbl13.getFont() );
		if ( lbl13Font != null ) {
			lbl13.setFont( lbl13Font );
		}
		lbl13.setText( "Caminho mais curto de a até m:" );
		root.add( lbl13, new com.intellij.uiDesigner.core.GridConstraints( 4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false ) );
		lblRes = new JLabel();
		Font lblResFont = this.$$$getFont$$$( "Consolas", Font.BOLD, 18, lblRes.getFont() );
		if ( lblResFont != null ) {
			lblRes.setFont( lblResFont );
		}
		lblRes.setText( "" );
		root.add( lblRes, new com.intellij.uiDesigner.core.GridConstraints( 5, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false ) );
	}
	
	/** @noinspection ALL */
	private Font $$$getFont$$$( String fontName, int style, int size, Font currentFont ) {
		if ( currentFont == null ) {
			return null;
		}
		String resultName;
		if ( fontName == null ) {
			resultName = currentFont.getName();
		} else {
			Font testFont = new Font( fontName, Font.PLAIN, 10 );
			if ( testFont.canDisplay( 'a' ) && testFont.canDisplay( '1' ) ) {
				resultName = fontName;
			} else {
				resultName = currentFont.getName();
			}
		}
		return new Font( resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize() );
	}
	
	/** @noinspection ALL */
	public JComponent $$$getRootComponent$$$() {
		return root;
	}
}
